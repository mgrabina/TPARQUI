static unsigned char keyboard[128] =
{
    0,  27, '1', '2', '3', '4', '5', '6', '7', '8',	/* 9 */
  '9', '0', '-', '=', '\b',	/* Backspace */
  '\t',			/* Tab */
  'q', 'w', 'e', 'r',	/* 19 */
  't', 'y', 'u', 'i', 'o', 'p', '[', ']', '\n',	/* Enter key */
    0,			/* 29   - Control */
  'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';',	/* 39 */
 '\'', '`',   0,		/* Left shift */
 '\\', 'z', 'x', 'c', 'v', 'b', 'n',			/* 49 */
  'm', ',', '.', '/',   0,				/* Right shift */
  '*',
    0,	' ', 0, 0, 0,   0,   0,   0,   0,   0,   0,   0,
 	0,	0, 0, 0, 0,	/* Up Arrow */
    0,	/* Page Up */
  '-',
    0,	/* Left Arrow */
    0,
    0,	/* Right Arrow */
  '+',
    0,	/* 79 - End key*/
    0,	/* Down Arrow */
    0,	/* Page Down */
    0,	/* Insert Key */
    0,	/* Delete Key */
    0,  0,   0,
    0, 0, 0,
};		


static unsigned char shiftedKeyboard[128] =
{
    0,  27, '!', '@', '#', '$', '%', '^', '&', '*', 
  '(', ')', '_', '+', '\b',
  '\t', 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P', '{', '}', '\n', 0,     
  'A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', ':', 
 '"', '|',   0,    
 '>', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', '<', '>', '?', 0,        
  '*', 0, ' ', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0,'-', 0, 0, 0,'+', 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
};

#define BUFFERSIZE 64;
#define RSHIFT_RELEASE 0xB6
#define RSHIFT  0x36

static int[BUFFERSIZE] buffer;
static int current=0;
static bool shifted;

void keyboardHandler(){
	int key = getKey() & 0x80, keyToPrint=0;
	if(key == RSHIFT){
		shifted = true;
	}else if(key == RSHIFT_RELEASE){
		shifted = false;
	}
	if(!shifted)
		keyToPrint = keyboard[key];
	else
		keyToPrint = shiftedKeyboard[key];
	if(keyToPrint != 0){
		if(current == BUFFERSIZE-1)
			current = 0;
		buffer[current++] = keyToPrint;	
	}else{
		//Keyboard value 0 if it isn't printable	
	}
	ncPrintChar(buffer[current-1]);	
}

int getNextKey(){
	if(current == BUFFERSIZE){
		current = 0;
	}
	return buffer[current-1];
} 
